# Number of CPUs to be allocated to the virtual machine.
# Default: 2
cpu: 4

# Size of the disk in GiB to be allocated to the virtual machine.
# NOTE: value can only be increased after virtual machine has been created.
#
# Default: 100
disk: 60

# Size of the memory in GiB to be allocated to the virtual machine.
# Default: 2
memory: 8

# Architecture of the virtual machine (x86_64, aarch64, host).
#
# NOTE: value cannot be changed after virtual machine is created.
# Default: host
arch: host

# Container runtime to be used (docker, containerd).
#
# NOTE: value cannot be changed after virtual machine is created.
# Default: docker
runtime: docker

# Set custom hostname for the virtual machine.
# Default: colima
#          colima-profile_name for other profiles
hostname: colima-k3s

# Kubernetes configuration for the virtual machine.
kubernetes:
  # Enable kubernetes.
  # Default: false
  enabled: false
  
  # Kubernetes version to use.
  # This needs to exactly match a k3s version https://github.com/k3s-io/k3s/releases
  # Default: latest stable release
  version: v1.34.1+k3s1
  
  # Additional args to pass to k3s https://docs.k3s.io/cli/server
  # Default: traefik is disabled
  k3sArgs:
    - --disable=traefik,servicelb,local-storage,metrics-server
    - --kubelet-arg=eviction-minimum-reclaim=imagefs.available=1%,nodefs.available=1%
    - --kube-proxy-arg=conntrack-max-per-core=0
    - --kube-apiserver-arg=oidc-issuer-url=https://id.5rv.me
    - --kube-apiserver-arg=oidc-client-id=6c2cc681-161f-4af2-ba2f-ec5091f7eec4
    - --kube-apiserver-arg=oidc-username-claim=sub
    - '--kube-apiserver-arg=oidc-username-prefix=idp:'
    - --kube-apiserver-arg=oidc-groups-claim=groups
    - '--kube-apiserver-arg=oidc-groups-prefix=idp-groups:'

# Auto-activate on the Host for client access.
# Setting to true does the following on startup
#  - sets as active Docker context (for Docker runtime).
#  - sets as active Kubernetes context (if Kubernetes is enabled).
# Default: true
autoActivate: true

# Network configurations for the virtual machine.
network:
  # Assign reachable IP address to the virtual machine.
  # NOTE: this is currently macOS only and ignored on Linux.
  # Default: false
  address: false
  
  # Custom DNS resolvers for the virtual machine.
  #
  # EXAMPLE
  # dns: [8.8.8.8, 1.1.1.1]
  #
  # Default: []
  dns:
    - 1.1.1.1
    - 8.8.8.8
  
  # DNS hostnames to resolve to custom targets using the internal resolver.
  # This setting has no effect if a custom DNS resolver list is supplied above.
  # It does not configure the /etc/hosts files of any machine or container.
  # The value can be an IP address or another host.
  #
  # EXAMPLE
  # dnsHosts:
  #   example.com: 1.2.3.4
  dnsHosts:
    host.docker.internal: host.lima.internal
  
  # Replicate host IP addresses in the VM. This enables port forwarding to specific
  # host IP addresses.
  #   e.g. `docker run --port 10.0.1.2:8080:8080 alpine` would only forward to the
  #   specified IP address.
  #
  # Default: false
  hostAddresses: false

# ===================================================================== #
# ADVANCED CONFIGURATION
# ===================================================================== #

# Forward the host's SSH agent to the virtual machine.
# Default: false
forwardAgent: false

# Docker daemon configuration that maps directly to daemon.json.
# https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file.
# NOTE: some settings may affect Colima's ability to start docker. e.g. `hosts`.
#
# EXAMPLE - disable buildkit
# docker:
#   features:
#     buildkit: false
#
# EXAMPLE - add insecure registries
# docker:
#   insecure-registries:
#     - myregistry.com:5000
#     - host.docker.internal:5000
#
# Colima default behaviour: buildkit enabled
# Default: {}
docker:
  experimental: true
  ipv6: false
  live-restore: true
  metrics-addr: "0.0.0.0:9323"
  default-address-pools:
    - base: "10.254.0.0/16"
      size: 24
  builder:
    gc:
      enabled: true

# Virtual Machine type (qemu, vz)
# NOTE: this is macOS 13 only. For Linux and macOS <13.0, qemu is always used.
#
# vz is macOS virtualization framework and requires macOS 13
#
# NOTE: value cannot be changed after virtual machine is created.
# Default: qemu
vmType: qemu

# Utilise rosetta for amd64 emulation (requires m1 mac and vmType `vz`)
# Default: false
rosetta: false

# Enable nested virtualization for the virtual machine (requires m3 mac and vmType `vz`)
# Default: false
nestedVirtualization: true

# Volume mount driver for the virtual machine (virtiofs, 9p, sshfs).
#
# virtiofs is limited to macOS and vmType `vz`. It is the fastest of the options.
#
# 9p is the recommended and the most stable option for vmType `qemu`.
#
# sshfs is faster than 9p but the least reliable of the options (when there are lots
# of concurrent reads or writes).
#
# NOTE: value cannot be changed after virtual machine is created.
# Default: virtiofs (for vz), sshfs (for qemu)
mountType: sshfs

# Propagate inotify file events to the VM.
# NOTE: this is experimental.
mountInotify: true

# The CPU type for the virtual machine (requires vmType `qemu`).
# Options available for host emulation can be checked with: `qemu-system-$(arch) -cpu help`.
# Instructions are also supported by appending to the cpu type e.g. "qemu64,+ssse3".
# Default: host
cpuType: x86_64

# Custom provision scripts for the virtual machine.
# Provisioning scripts are executed on startup and therefore needs to be idempotent.
#
# EXAMPLE - script executed as root
# provision:
#   - mode: system
#     script: apt-get install htop vim
#
# EXAMPLE - script executed as user
# provision:
#   - mode: user
#     script: |
#       [ -f ~/.provision ] && exit 0;
#       echo provisioning as $USER...
#       touch ~/.provision
#
# Default: []
provision:
  - mode: system
    script: |
       echo "fs.aio-max-nr=524288" > /etc/sysctl.d/99-extra.conf
       echo "fs.file-max=9000000" >> /etc/sysctl.d/99-extra.conf
       echo "fs.inotify.max_user_instances=10240" >> /etc/sysctl.d/99-extra.conf
       echo "fs.inotify.max_user_watches=1048576" >> /etc/sysctl.d/99-extra.conf
       echo "fs.nr_open=12000000" >> /etc/sysctl.d/99-extra.conf
       echo "kernel.dmesg_restrict=0" >> /etc/sysctl.d/99-extra.conf
       echo "kernel.hung_task_timeout_secs=0" >> /etc/sysctl.d/99-extra.conf
       echo "net.core.netdev_max_backlog=30000" >> /etc/sysctl.d/99-extra.conf
       echo "net.core.rmem_default=262144" >> /etc/sysctl.d/99-extra.conf
       echo "net.core.rmem_max=16777216" >> /etc/sysctl.d/99-extra.conf
       echo "net.core.wmem_default=262144" >> /etc/sysctl.d/99-extra.conf
       echo "net.core.wmem_max=67108864" >> /etc/sysctl.d/99-extra.conf
       echo "net.ipv4.ip_forward=1" >> /etc/sysctl.d/99-extra.conf
       echo "net.ipv4.ipfrag_high_threshold=5242880" >> /etc/sysctl.d/99-extra.conf
       echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.d/99-extra.conf
       echo "net.ipv4.tcp_fastopen=3" >> /etc/sysctl.d/99-extra.conf
       echo "net.ipv4.tcp_keepalive_intvl=30" >> /etc/sysctl.d/99-extra.conf
       echo "net.ipv4.tcp_keepalive_probes=5" >> /etc/sysctl.d/99-extra.conf
       echo "net.ipv4.tcp_keepalive_time=300" >> /etc/sysctl.d/99-extra.conf
       echo "vm.dirty_background_bytes=583200768" >> /etc/sysctl.d/99-extra.conf
       echo "vm.dirty_background_ratio=5" >> /etc/sysctl.d/99-extra.conf
       echo "vm.dirty_bytes=851968768" >> /etc/sysctl.d/99-extra.conf
       echo "vm.dirty_expire_centisecs=3000" >> /etc/sysctl.d/99-extra.conf
       echo "vm.dirty_ratio=10" >> /etc/sysctl.d/99-extra.conf
       echo "vm.dirty_time=0" >> /etc/sysctl.d/99-extra.conf
       echo "vm.dirty_writeback_centisecs=300" >> /etc/sysctl.d/99-extra.conf
       echo "vm.min_free_kbytes=65536" >> /etc/sysctl.d/99-extra.conf
       echo "vm.vfs_cache_pressure=90" >> /etc/sysctl.d/99-extra.conf
       sysctl --system
  - mode: user
    script: |
       docker buildx create --name multiarch --driver docker-container --use
       docker buildx inspect --bootstrap

# Modify ~/.ssh/config automatically to include a SSH config for the virtual machine.
# SSH config will still be generated in $COLIMA_HOME/ssh_config regardless.
# Default: true
sshConfig: true

# The port number for the SSH server for the virtual machine.
# When set to 0, a random available port is used.
#
# Default: 0
sshPort: 0

# Configure volume mounts for the virtual machine.
# Colima mounts user's home directory by default to provide a familiar
# user experience.
#
# EXAMPLE
# mounts:
#   - location: ~/secrets
#     writable: false
#   - location: ~/projects
#     writable: true
#
# Colima default behaviour: $HOME and /tmp/colima are mounted as writable.
# Default: []
mounts: []

# Specify a custom disk image for the virtual machine.
# When not specified, Colima downloads an appropriate disk image from Github at
# https://github.com/abiosoft/colima-core/releases.
# The file path to a custom disk image can be specified to override the behaviour.
#
# Default: ""
diskImage: ""

# Environment variables for the virtual machine.
#
# EXAMPLE
# env:
#   KEY: value
#   ANOTHER_KEY: another value
#
# Default: {}
env: {}
