#!/bin/bash

#If environment variable DEBUG is set to "true" bash debug will be set. Set Debug to "verbose" for more verbose debug information
if [ "${MY_DEBUG,,}" == "true" ]; then set -x; elif [ "${MY_DEBUG,,}" == "verbose" ]; then set -xv; fi

set -euo pipefail
IFS=$'\n\t'
temp_folder=$(mktemp -d -t tmp.XXXXXXXXXX)
cd $temp_folder

function finish {
    rm -rf "$temp_folder"
}

trap finish EXIT

# Define the default safe folder location
SAFE_FOLDER=${SAFE_FOLDER:-"$HOME/Vaults/Safe"}
USER_BIN_DIR="${HOME:-"~"}/.local/bin"

function install_password_manager() {
  mkdir -p "${USER_BIN_DIR}"

  if ! type bw >/dev/null 2>&1; then
    echo "Installing Bitwarden CLI..."
    curl -sL "https://github.com/bitwarden/clients/releases/download/cli-v2025.1.2/bw-linux-2025.1.2.zip" | funzip > bw
    install -m 0755 bw "${USER_BIN_DIR}/bw"
  else
    echo "Bitwarden CLI is already installed. Skipping installation."
  fi
}

function install_password_manager_alternative() {
  type rbw >/dev/null 2>&1 && exit
  mkdir -p ${USER_BIN_DIR}
  curl -sLo rbw.tar.gz "https://github.com/doy/rbw/releases/download/1.13.2/rbw_1.13.2_linux_amd64.tar.gz" | funzip > bw
  tar xzf rbw.tar.gz
  install -m 0755 rbw ${USER_BIN_DIR}/rbw
  install -m 0755 rbw-agent ${USER_BIN_DIR}/rbw-agent
}

function install_oathtool() {
  mkdir -p ${USER_BIN_DIR}
  if ! type oathtool >/dev/null 2>&1; then
    echo "Installing oathtool..."
    curl -o oathtool -sL "https://raw.githubusercontent.com/dxas90/dotfiles/refs/heads/main/dot_local/bin/executable_oathtool"
    install -m 0755 oathtool "${USER_BIN_DIR}/oathtool"
  else
    echo "oathtool is already installed. Skipping installation."
  fi
}

_oathtool() {
   python3 <(curl -sL "https://raw.githubusercontent.com/dxas90/dotfiles/refs/heads/main/dot_local/bin/executable_oathtool") $@
}

# Function to log into Bitwarden and handle session management
bw_login() {
    if [[ ! -d "$SAFE_FOLDER" ]]; then
        echo "Error: Safe directory '$SAFE_FOLDER' not found!"
        exit 1
    fi
    install_password_manager
    install_oathtool
    local bitwarden=${1:-"remote"}  # Default to "remote" if no argument is given

    # Logout from any existing session (ignores errors if already logged out)
    bw logout >/dev/null 2>&1 || true

    # Define password file and OTP code
    PASSWORD_FILE=${PASSWORD_FILE:-".bw.${bitwarden}"}
    if [[ ! -f "$SAFE_FOLDER/$PASSWORD_FILE" ]]; then
        echo "Error: Password dile '$PASSWORD_FILE' not found inside $SAFE_FOLDER !"
        exit 1
    fi
    OTP_CODE=${OTP_CODE:-"$(cat "$SAFE_FOLDER/$PASSWORD_FILE.otp" | _oathtool)"}

    # Configure Bitwarden server based on local or remote usage
    if [ "$bitwarden" == "local" ]; then
        bw config server "https://vaultwarden.xome.duckdns.org"
    else
        bw config server "https://vault.bitwarden.com"
    fi

    # Attempt to log in and retrieve a session key
    BW_SESSION=$(bw login "${BW_USER:-dxas90@gmail.com}" --method 0 --code "$OTP_CODE" --passwordfile "$SAFE_FOLDER/$PASSWORD_FILE" --raw)

    # Check if login was successful
    if [ -n "$BW_SESSION" ]; then
        echo "export BW_SESSION=\"$BW_SESSION\"" > ~/.bw_session
        export BW_SESSION="$BW_SESSION"

        # Unlock Bitwarden vault and sync data
        bw unlock --check --passwordfile "$SAFE_FOLDER/$PASSWORD_FILE"
        bw sync
    else
        echo "Bitwarden login failed."
        exit 1
    fi
}

rbw_login() {
    install_password_manager_alternative
    local bitwarden=${1:-"remote"}  # Default to "remote" if no argument is given

    # Logout from any existing session (ignores errors if already logged out)
    rbw logout >/dev/null 2>&1 || true

    # Configure Bitwarden server based on local or remote usage
    if [ "$bitwarden" == "local" ]; then
      rbw config set base_url "https://vaultwarden.xome.duckdns.org"
    else
      rbw config set base_url "https://vault.bitwarden.com"
    fi
    rbw config set email ${BW_USER:-dxas90@gmail.com}
    rbw login
    rbw unlock
    rbw sync
}

# Handle command-line arguments for local or remote login
case "${1:-''}" in
    local)
        bw_login "local"
        ;;
    remote)
        bw_login
        ;;
    alt)
        rbw_login "local"
        ;;
    alt-remote)
        rbw_login
        ;;
    *)
        echo "Usage: $(basename "$0") local|remote"
        ;;
esac

# vim: set syn=sh ts=4 sw=4 et filetype=sh
